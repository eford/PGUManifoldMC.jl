x <- abs(rnorm(n, mean=0, sd=2))
y <- x^1.5+rnorm(n, mean=0, sd=1)
plot(x, y)
model <- gam(y ~ s(x))
plot(model)
n <- 5
x <- abs(rnorm(n, mean=0, sd=2))
y <- x^1.5+rnorm(n, mean=0, sd=1)
plot(x, y)
model <- gam(y ~ s(x))
plot(model)
n <- 10
x <- abs(rnorm(n, mean=0, sd=2))
y <- x^1.5+rnorm(n, mean=0, sd=1)
plot(x, y)
model <- gam(y ~ s(x))
plot(model)
n <- 10
x <- abs(rnorm(n, mean=0, sd=2))
y <- x^1.5+rnorm(n, mean=0, sd=1)
plot(x, y)
model <- gam(y ~ s(x))
plot(model)
n <- 10
x <- abs(rnorm(n, mean=0, sd=2))
y <- x^1.5+rnorm(n, mean=0, sd=1)
plot(x, y)
model <- gam(y ~ s(x))
plot(model)
n <- 10
x <- abs(rnorm(n, mean=0, sd=2))
y <- x^1.5+rnorm(n, mean=0, sd=1)
plot(x, y)
model <- gam(y ~ s(x))
plot(model)
n <- 10
x <- abs(rnorm(n, mean=0, sd=2))
y <- x^1.5+rnorm(n, mean=0, sd=1)
plot(x, y)
model <- gam(y ~ s(x))
plot(model)
n <- 10
x <- abs(rnorm(n, mean=0, sd=2))
y <- x^1.5+rnorm(n, mean=0, sd=1)
plot(x, y)
model <- gam(y ~ s(x))
plot(model)
n <- 10
x <- abs(rnorm(n, mean=0, sd=2))
y <- x^1.5+rnorm(n, mean=0, sd=1)
plot(x, y)
model <- gam(y ~ s(x))
plot(model)
8+9*3.5+0.5
4+2.25+4.5+2
4+2.25+5.75+3.25
3+2.25+2.75+2.5
3+2.25+3.75+2.5
4+2.25+5.75+1.75
3.25+2.25+3.5+1.75
3.5+2.25+5.75+3.25
4.75+2.25+5.75+2.75
5+2.25+3.75+3
4.25+2+3.75+2.5
4+2+3+3
5+2.25+5.75+2
2.5+2.25+4+3
4*0.5+11*3.5
?hist
library(MASS)
bivn <- mvrnorm(1000, mu = c(0, 0), Sigma = matrix(c(1, .5, .5, 1), 2))
# now we do a kernel density estimate
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)
# now plot your results
contour(bivn.kde)
image(bivn.kde)
persp(bivn.kde, phi = 45, theta = 30)
image(bivn.kde); contour(bivn.kde, add = T)
library(mvtnorm)
x.points <- seq(-3,3,length.out=100)
y.points <- x.points
z <- matrix(0,nrow=100,ncol=100)
mu <- c(1,1)
sigma <- matrix(c(2,1,1,1),nrow=2)
for (i in 1:100) {
for (j in 1:100) {
z[i,j] <- dmvnorm(c(x.points[i],y.points[j]),
mean=mu,sigma=sigma)
}
}
contour(x.points,y.points,z)
?dmvnorm
?dnorm
dnorm(0.1)
pnorm(0.1)
matrix(c(1, 0.75, 0.75, 1), nrow=2)
library(mvtnorm)n <- 100x.points <- seq(-3, 3, length.out=n)y.points <- x.pointsz <- matrix(0, nrow=n, ncol=n)mu <- c(1,1)sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)for (i in 1:n) {  for (j in 1:100) {    z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)  }}contour(x.points, y.points, z)
library(mvtnorm)
n <- 100x.points <- seq(-3, 3, length.out=n)y.points <- x.pointsz <- matrix(0, nrow=n, ncol=n)mu <- c(1,1)sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)for (i in 1:n) {  for (j in 1:100) {    z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)  }}contour(x.points, y.points, z)
n <- 100
x.points <- seq(-3, 3, length.out=n)y.points <- x.points
x.points <- seq(-3, 3, length.out=n)
y.points <- x.points
z <- matrix(0, nrow=n, ncol=n)
mu <- c(1,1)sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
mu <- c(1,1)sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
mu <- c(1, 1)
library(mvtnorm)n <- 100x.points <- seq(-3, 3, length.out=n)y.points <- x.pointsz <- matrix(0, nrow=n, ncol=n)mu <- c(1, 1)sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)for (i in 1:n) {  for (j in 1:100) {    z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)  }}contour(x.points, y.points, z)
library(mvtnorm)
n <- 100
x.points <- seq(-3, 3, length.out=n)
y.points <- x.points
z <- matrix(0, nrow=n, ncol=n)
mu <- c(1, 1)
sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
for (i in 1:n) {
for (j in 1:100) {
z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
}
}
contour(x.points, y.points, z)
for (i in 1:n) {
for (j in 1:100) {
z[i,j] <- pmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
}
}
contour(x.points, y.points, z)
for (i in 1:n) {
for (j in 1:100) {
z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
}
}
contour(x.points, y.points, z)
x.points <- seq(-3, 4, length.out=n)
y.points <- x.points
z <- matrix(0, nrow=n, ncol=n)
mu <- c(1, 1)
sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
for (i in 1:n) {
for (j in 1:100) {
z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
}
}
contour(x.points, y.points, z)
n <- 100
x.points <- seq(-2, 4, length.out=n)
y.points <- x.points
z <- matrix(0, nrow=n, ncol=n)
mu <- c(1, 1)
sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
for (i in 1:n) {
for (j in 1:100) {
z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
}
}
contour(x.points, y.points, z)
n <- 100
x.points <- seq(-2, 4, length.out=n)
y.points <- x.points
z <- matrix(0, nrow=n, ncol=n)
mu <- c(1, 1)
sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
for (i in 1:n) {
for (j in 1:100) {
z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
}
}
contour(x.points, y.points, z)
?qchisq
x.points
x.points-mu
(x.points-mu)''
(x.points-mu)'
''
sigma%*%(x.points-mu)
sigma%*%(x.points[1]-mu)
x.points[1]
x.points
sigma%*%(c(x.points[1], y.points[1])-mu)
?dot
c(1, 2)%*%c(2, 2)
(c(x.points[1], y.points[1])-mu)%*%(sigma%*%(c(x.points[1], y.points[1])-mu))
?dchisq
for (i in 1:n) {
for (j in 1:n) {
z[i,j] <- dchisq((c(x.points[i], y.points[i])-mu)%*%(sigma%*%(c(x.points[i], y.points[i])-mu)), df=2)
}
}
contour(x.points, y.points, z)
for (i in 1:n) {
for (j in 1:n) {
z[i,j] <- qchisq((c(x.points[i], y.points[i])-mu)%*%(sigma%*%(c(x.points[i], y.points[i])-mu)), df=2)
}
}
contour(x.points, y.points, z)
for (i in 1:n) {
for (j in 1:n) {
z[i,j] <- pchisq((c(x.points[i], y.points[i])-mu)%*%(sigma%*%(c(x.points[i], y.points[i])-mu)), df=2)
}
}
contour(x.points, y.points, z)
?qchisq
qchisq(0.05, 2)
qchisq(0.55, 2)
pchisq(0.95, 2)
qchisq(0.05, df = 2)
pchisq(0.05, df = 2)
pchisq(0.95, df = 2)
qchisq(0.95, df = 2)
qchisq(0.05, df = 2)
qchisq(0.05, df = 2, lower.tail = FALSE)
sqrt(qchisq(0.05, df = 2, lower.tail = FALSE))
library(mvtnorm)
n <- 100
x.points <- seq(-2, 4, length.out=n)
y.points <- x.points
z <- matrix(0, nrow=n, ncol=n)
mu <- c(1, 1)
sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
for (i in 1:n) {
for (j in 1:n) {
z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
}
}
contour(x.points, y.points, z)
z
?contour
for (i in 1:n) {
for (j in 1:n) {
z[i,j] <- dchisq((c(x.points[i], y.points[i])-mu)%*%(sigma%*%(c(x.points[i], y.points[i])-mu)), df=2)
}
}
contour(x.points, y.points, z)
z
?ellipse
?rmvnorm
rmvnorm(2, mean = mu, sigma = sigma)
plot(rmvnorm(100, mean = mu, sigma = sigma))
contour(x.points, y.points, z)
?eigen
eigen(inv(sigma))
solve(sigma)%*%sigma
eigen(solve(sigma))
eigen(solve(sigma))$values
sort(eigen(solve(sigma))$values)
a <- l[1] # horizontal radius
b <- l[2] # vertical radius
x0 <- mu[1] # % x0,y0 ellipse centre coordinates
y0 <- mu[2]
t=-pi:0.01:pi
c <- qchisq(0.95, df = 2) # 5.991465
l <- sort(eigen(solve(sigma))$values)
a <- l[1] # horizontal radius
b <- l[2] # vertical radius
x0 <- mu[1]
y0 <- mu[2]
t=-pi:0.01:pi
t <- -pi:0.01:pi
t <- seq(-pi, pi, by=0.01)
plot(rmvnorm(100, mean = mu, sigma = sigma))
c <- qchisq(0.95, df = 2) # 5.991465
l <- sort(eigen(solve(sigma))$values)
a <- l[1] # horizontal radius
b <- l[2] # vertical radius
x0 <- mu[1] # % x0,y0 ellipse centre coordinates
y0 <- mu[2]
t <- seq(-pi, pi, by=0.01)
x0+a*cos(t)
lines(x0+a*cos(t), y0+b*sin(t))
l <- sort(eigen(solve(sigma))$values)
a <- c*sqrt(l[1]) # horizontal radius
b <- c*sqrt(l[2]) # vertical radius
x0 <- mu[1] # % x0,y0 ellipse centre coordinates
y0 <- mu[2]
t <- seq(-pi, pi, by=0.01)
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(x0+a*cos(t), y0+b*sin(t))
library(mvtnorm)
n <- 100
x.points <- seq(-2, 4, length.out=n)
y.points <- x.points
z <- matrix(0, nrow=n, ncol=n)
mu <- c(1, 1)
sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
for (i in 1:n) {
for (j in 1:n) {
z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
}
}
contour(x.points, y.points, z)
for (i in 1:n) {
for (j in 1:n) {
z[i,j] <- dchisq((c(x.points[i], y.points[i])-mu)%*%(solve(sigma)%*%(c(x.points[i], y.points[i])-mu)), df=2)
}
}
contour(x.points, y.points, z)
plot(rmvnorm(100, mean = mu, sigma = sigma))
c <- qchisq(0.95, df = 2) # 5.991465
l <- sort(eigen(sigma)$values)
l
sigma
a <- c*sqrt(l[1]) # horizontal radius
b <- c*sqrt(l[2]) # vertical radius
x0 <- mu[1] # % x0,y0 ellipse centre coordinates
y0 <- mu[2]
t <- seq(-pi, pi, by=0.01)
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(t), y0+b*sin(t))
l
decomposition <- eigen(sigma)$values
decomposition
decomposition <- eigen(sigma)
decomposition
?eigen
sigma%*%decomposition$vectors
decomposition$values*decomposition$vectors
sigma''
transpose(sigma)
sigma%*%decomposition%vectors[1, :]
sigma%*%decomposition$vectors[1, :]
sigma%*%decomposition$vectors[1, ]
decomposition$values*decomposition$vectors[1, ]
decomposition$values[1]*decomposition$vectors[1, ]
decomposition$vectors
decomposition$vectors%*%diag(decomposition$values)%*%decomposition$vector
decomposition$vectors%*%diag(decomposition$values)%*%decomposition$vectors
decomposition$vectors%*%diag(decomposition$values)%*%solve(decomposition$vectors)
l <- decomposition$values
l
atan()
c <- qchisq(0.95, df = 2) # 5.991465
decomposition <- eigen(sigma)
l <- decomposition$values
v <- decomposition$vectors[1, ]
phi <- atan(v[2]/v[1])
phi
v
decomposition <- eigen(sigma)
l <- decomposition$values
v <- decomposition$vectors[, 1]
phi <- atan(v[2]/v[1])
phi
c <- qchisq(0.95, df = 2) # 5.991465
decomposition <- eigen(sigma)
l <- decomposition$values
v <- decomposition$vectors[, 1]
phi <- atan(v[2]/v[1])
a <- c*sqrt(l[1]) # horizontal radius
b <- c*sqrt(l[2]) # vertical radius
x0 <- mu[1] # % x0,y0 ellipse centre coordinates
y0 <- mu[2]
t <- seq(-pi, pi, by=0.01)
# for (i in 1:n) {
#   for (j in 1:n) {
#     z[i,j] <- dchisq((c(x.points[i], y.points[i])-mu)%*%(solve(sigma)%*%(c(x.points[i], y.points[i])-mu)), df=2)
#   }
# }
#
# contour(x.points, y.points, z)
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(phi)*cos(t)-b*sin(phi)*sin(t), y0+a*sin(phi)*cos(t)+b*cos(phi)*sin(t))
n <- 100
x.points <- seq(-10, 10, length.out=n)
y.points <- x.points
z <- matrix(0, nrow=n, ncol=n)
mu <- c(1, 1)
sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
for (i in 1:n) {
for (j in 1:n) {
z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
}
}
contour(x.points, y.points, z)
c <- qchisq(0.95, df = 2) # 5.991465
decomposition <- eigen(sigma)
l <- decomposition$values
v <- decomposition$vectors[, 1]
phi <- atan(v[2]/v[1])
a <- c*sqrt(l[1]) # horizontal radius
b <- c*sqrt(l[2]) # vertical radius
x0 <- mu[1] # % x0,y0 ellipse centre coordinates
y0 <- mu[2]
t <- seq(-pi, pi, by=0.01)
# for (i in 1:n) {
#   for (j in 1:n) {
#     z[i,j] <- dchisq((c(x.points[i], y.points[i])-mu)%*%(solve(sigma)%*%(c(x.points[i], y.points[i])-mu)), df=2)
#   }
# }
#
# contour(x.points, y.points, z)
plot(rmvnorm(100, mean = mu, sigma = sigma))
lines(x0+a*cos(phi)*cos(t)-b*sin(phi)*sin(t), y0+a*sin(phi)*cos(t)+b*cos(phi)*sin(t))
plot(rmvnorm(100, mean = mu, sigma = sigma), xlim=c(-10, 10), ylim=c(-10, 10))
lines(x0+a*cos(phi)*cos(t)-b*sin(phi)*sin(t), y0+a*sin(phi)*cos(t)+b*cos(phi)*sin(t))
plot(rmvnorm(1000, mean = mu, sigma = sigma), xlim=c(-10, 10), ylim=c(-10, 10))
lines(x0+a*cos(phi)*cos(t)-b*sin(phi)*sin(t), y0+a*sin(phi)*cos(t)+b*cos(phi)*sin(t))
plot(rmvnorm(10000, mean = mu, sigma = sigma), xlim=c(-10, 10), ylim=c(-10, 10))
lines(x0+a*cos(phi)*cos(t)-b*sin(phi)*sin(t), y0+a*sin(phi)*cos(t)+b*cos(phi)*sin(t))
plot(rmvnorm(100000, mean = mu, sigma = sigma), xlim=c(-10, 10), ylim=c(-10, 10))
lines(x0+a*cos(phi)*cos(t)-b*sin(phi)*sin(t), y0+a*sin(phi)*cos(t)+b*cos(phi)*sin(t))
c <- qchisq(0.90, df = 2) # 5.991465
decomposition <- eigen(sigma)
l <- decomposition$values
v <- decomposition$vectors[, 1]
phi <- atan(v[2]/v[1])
a <- c*sqrt(l[1]) # horizontal radius
b <- c*sqrt(l[2]) # vertical radius
x0 <- mu[1] # % x0, y0 ellipse centre coordinates
y0 <- mu[2]
t <- seq(-pi, pi, by=0.01)
plot(rmvnorm(100000, mean = mu, sigma = sigma), xlim=c(-10, 10), ylim=c(-10, 10))
lines(x0+a*cos(phi)*cos(t)-b*sin(phi)*sin(t), y0+a*sin(phi)*cos(t)+b*cos(phi)*sin(t))
?qchisq
library(mvtnorm)
mu <- c(1, 1)
sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
# n <- 100
#
# x.points <- seq(-10, 10, length.out=n)
# y.points <- x.points
#
# z <- matrix(0, nrow=n, ncol=n)
#
# for (i in 1:n) {
#   for (j in 1:n) {
#     z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
#   }
# }
#
# contour(x.points, y.points, z)
c <- qchisq(0.90, df = 2) #  for p = 0.95, c = 5.991465
decomposition <- eigen(sigma)
l <- decomposition$values
v <- decomposition$vectors[, 1]
phi <- atan(v[2]/v[1]) # v is the eigenvector corresponding to the highest eigenvalue
a <- c*sqrt(l[1]) # horizontal radius
b <- c*sqrt(l[2]) # vertical radius
x0 <- mu[1] # % x0, y0 ellipse centre coordinates
y0 <- mu[2]
t <- seq(-pi, pi, by=0.01)
plot(rmvnorm(100000, mean = mu, sigma = sigma), xlim=c(-10, 10), ylim=c(-10, 10))
lines(x0+a*cos(phi)*cos(t)-b*sin(phi)*sin(t), y0+a*sin(phi)*cos(t)+b*cos(phi)*sin(t))
library(mvtnorm)
mu <- c(1, 1)
sigma <- matrix(c(1, 0.75, 0.75, 1), nrow=2)
# n <- 100
#
# x.points <- seq(-10, 10, length.out=n)
# y.points <- x.points
#
# z <- matrix(0, nrow=n, ncol=n)
#
# for (i in 1:n) {
#   for (j in 1:n) {
#     z[i,j] <- dmvnorm(c(x.points[i], y.points[j]), mean=mu, sigma=sigma)
#   }
# }
#
# contour(x.points, y.points, z)
c <- qchisq(0.90, df = 2) #  for p = 0.95, c = 5.991465
decomposition <- eigen(sigma)
l <- decomposition$values
v <- decomposition$vectors[, 1]
phi <- atan(v[2]/v[1]) # v is the eigenvector corresponding to the highest eigenvalue
a <- c*sqrt(l[1]) # horizontal radius
b <- c*sqrt(l[2]) # vertical radius
x0 <- mu[1] # % x0, y0 ellipse centre coordinates
y0 <- mu[2]
t <- seq(-pi, pi, by=0.01)
plot(rmvnorm(1000, mean = mu, sigma = sigma), xlim=c(-10, 10), ylim=c(-10, 10))
lines(x0+a*cos(phi)*cos(t)-b*sin(phi)*sin(t), y0+a*sin(phi)*cos(t)+b*cos(phi)*sin(t))
x <- seq(0.01, 100. by=0.01)
x <- seq(0.01, 100, by=0.01)
plot(x, x^{-0.5}, type="l")
lines(x, x*log(x), col="red")
plot(x, x*log(x), type="l")
lines(x, x^{-0.5}, col="red")
lines(x, x^{1/3}, col="green")
setwd("~/.julia/v0.4/PGUManifoldMC/examples/logistic/analysis/src")
source('~/.julia/v0.4/PGUManifoldMC/examples/logistic/analysis/src/meanplot.r', echo=TRUE)
source('~/.julia/v0.4/PGUManifoldMC/examples/logistic/analysis/src/meanplot.r', echo=TRUE)
source('~/.julia/v0.4/PGUManifoldMC/examples/logistic/analysis/src/acfplot.r', echo=TRUE)
source('~/.julia/v0.4/PGUManifoldMC/examples/logistic/analysis/src/mala_traceplot.r', echo=TRUE)
source('~/.julia/v0.4/PGUManifoldMC/examples/logistic/analysis/src/smmala_traceplot.r', echo=TRUE)
source('~/.julia/v0.4/PGUManifoldMC/examples/logistic/analysis/src/psmmala_traceplot.r', echo=TRUE)
